{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","modesOfPaymentList","useState","hasSignedIn","setHasSignedIn","needsSignIn","setNeedsSignIn","categories","setCategories","subCategories","setSubCategories","mainCategorySelectedVal","subCategorySelectedVal","amountVal","modeOfPayment","userInputValues","setUserInputValues","handleSubmitClick","a","budgetEntry","date","Date","toLocaleDateString","categoryMain","categorySub","amount","mode","comment","fetch","method","body","JSON","stringify","budgetEntryObj","headers","newUserInputValues","fetchCategories","categoryMap","categoryMapProm","json","googleData","token","tokenId","res","useEffect","needsSignInObj","getLogggedInInfo","className","clientId","process","buttonText","onSuccess","onFailure","data","cookiePolicy","console","log","Container","maxWidth","id","Stack","spacing","Autocomplete","options","Object","keys","freeSolo","inputValue","style","width","onInputChange","event","value","reason","tmpSubCategories","handleMainCategoryInputChange","renderInput","params","TextField","label","variant","handleSubCategoryInputChange","type","inputProps","step","onChange","target","handleAmountValInputChange","InputLabelProps","shrink","handleModeChange","Box","sx","Button","color","size","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfba83e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport GoogleLogin from 'react-google-login';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\n\nfunction App() {\n  const modesOfPaymentList = ['GPay', 'Card', 'Cash'];\n  const [hasSignedIn, setHasSignedIn] = useState(false);\n  const [needsSignIn, setNeedsSignIn] = useState(true);\n  const [categories, setCategories] = useState({});\n  const [subCategories, setSubCategories] = useState([]);\n  const [userInputValues, setUserInputValues] = useState({ mainCategorySelectedVal: '', subCategorySelectedVal: '', amountVal: '', modeOfPayment: modesOfPaymentList });\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  function handleClientLoad() {\n    initClient();\n  }\n\n  var handleMainCategoryInputChange = (event, value, reason) => {\n    var tmpSubCategories = categories[value];\n    if (!tmpSubCategories) {\n      tmpSubCategories = [''];\n    }\n    setSubCategories(tmpSubCategories);\n    const newUserInputValues = { ...userInputValues };\n    newUserInputValues.subCategorySelectedVal = '';\n    newUserInputValues.mainCategorySelectedVal = value;\n    setUserInputValues(newUserInputValues);\n  }\n\n  var handleSubCategoryInputChange = (event, value, reason) => {\n    const newUserInputValues = { ...userInputValues };\n    newUserInputValues.subCategorySelectedVal = value;\n    setUserInputValues(newUserInputValues);\n  }\n\n  var handleAmountValInputChange = (event) => {\n    const newUserInputValues = { ...userInputValues };\n    newUserInputValues.amountVal = event.target.value;\n    setUserInputValues(newUserInputValues);\n  }\n\n  var handleModeChange = ( event, value, reason ) => {\n    const newUserInputValues = { ...userInputValues };\n    newUserInputValues.modeOfPayment = value;\n    setUserInputValues(newUserInputValues);\n  };\n\n  var handleSubmitClick = async () => {\n    const budgetEntry = {\n      date: new Date().toLocaleDateString('en-GB'),\n      categoryMain: userInputValues.mainCategorySelectedVal,\n      categorySub:  userInputValues.subCategorySelectedVal,\n      amount: userInputValues.amountVal,\n      mode: userInputValues.modeOfPayment,\n      comment: ''\n    }\n    const result = await fetch(\"/budget/submitSingleEntry\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        budgetEntryObj: budgetEntry\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if( result ) {\n      const newUserInputValues = { ...userInputValues };\n      newUserInputValues.mainCategorySelectedVal = '';\n      newUserInputValues.subCategorySelectedVal = '';\n      newUserInputValues.amountVal = '';\n      newUserInputValues.modeOfPayment = '';\n      setUserInputValues(newUserInputValues);\n    }\n    //console.log(`${result.updates.updatedCells} cells appended.`)\n  };\n\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n  function initClient() {\n    fetchCategories();\n  };\n\n  async function fetchCategories() {\n    if(!hasSignedIn) return;\n    let categoryMap = {};\n    let categoryMapProm = await fetch(\"/budget/categories\");\n    categoryMap = await categoryMapProm.json();\n    setCategories(categoryMap);\n  };\n\n  async function handleLogin(googleData) {\n    const res = await fetch(\"/api/v1/auth/google\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json()\n    setNeedsSignIn(false);\n    setHasSignedIn(true);\n  }\n\n  function handleFailureToLogin( data ) {\n    setNeedsSignIn(true);\n    setHasSignedIn(false);\n  }\n\n  useEffect(() => {\n    async function getLogggedInInfo() {\n      const res = await fetch(\"/budget/needsSignIn\", {\n        method: \"POST\"\n      });\n      let needsSignInObj = await res.json();\n      setNeedsSignIn( needsSignInObj.needsSignIn );\n      if( !needsSignInObj.needsSignIn ) {\n        setHasSignedIn( true );\n      }\n    }\n    getLogggedInInfo();\n  }, []);\n\n  useEffect(() => {\n    fetchCategories()\n  }, [hasSignedIn]);\n\n  return (\n    <div className=\"App\">\n      { needsSignIn && \n      <GoogleLogin\n      clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n      buttonText=\"Log in with Google\"\n      onSuccess={handleLogin}\n      onFailure={handleFailureToLogin}\n      cookiePolicy={'single_host_origin'}\n    />}\n    {console.log(\"************client side id***********: \" + process.env.REACT_APP_GOOGLE_CLIENT_ID )}\n    { !needsSignIn && \n      <Container maxWidth=\"sm\">\n        <div id=\"content\">\n          <Stack spacing={5}>\n            <p>Budget-Entry</p>\n            <Autocomplete\n              id=\"main-categories\"\n              options={Object.keys(categories)}\n              freeSolo\n              inputValue={userInputValues.mainCategorySelectedVal}\n              style={{ width: 300 }}\n              onInputChange={(event, value, reason) => { handleMainCategoryInputChange(event, value, reason) }}\n              renderInput={(params) => <TextField {...params} label=\"Main Category\" variant=\"outlined\" />}\n            />\n            <Autocomplete\n              id=\"sub-categories\"\n              options={subCategories}\n              inputValue={userInputValues.subCategorySelectedVal}\n              onInputChange={(event, value, reason) => { handleSubCategoryInputChange(event, value, reason) }}\n              freeSolo\n              style={{ width: 300 }}\n              renderInput={(params) => <TextField {...params} label=\"Sub Category\" variant=\"outlined\" />}\n            />\n            <TextField\n              id=\"amount-val\"\n              label=\"Amount\"\n              type=\"number\"\n              value={userInputValues.amountVal}\n              inputProps={{ step: 0.01 }}\n              onChange={(event) => { handleAmountValInputChange(event) }}\n              style={{ width: 300 }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n            />\n            <Autocomplete\n              id=\"mode-of-payment\"\n              options={modesOfPaymentList}\n              inputValue={userInputValues.modeOfPayment}\n              onInputChange={(event, value, reason) => { handleModeChange(event, value, reason) }}\n              freeSolo\n              style={{ width: 300 }}\n              renderInput={(params) => <TextField {...params} label=\"Mode\" variant=\"outlined\" />}\n            />\n            <Box\n              sx={{\n                width: 300\n              }}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                onClick={() => { handleSubmitClick() }}>\n                Submit\n              </Button>\n            </Box>\n          </Stack>\n        </div>\n      </Container>\n    }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}